#!/usr/bin/env bash
set -e

echo "- container image OS:"
grep PRETTY_NAME /etc/os-release

echo "- create groups if necessary..."

{{.createGroups}}

# echo "group_exists: ${group_exists}"
# echo "      errors: ${errors}"
# echo "-------------------------------"

echo "- creating user..."
existing_user_by_uid=`getent passwd "{{.uid}}" | cut -f1 -d: || true`
# echo "existing_user_by_uid ({{.uid}}): ${existing_user_by_uid}"
if [ -n "${existing_user_by_uid}" ]; then
    echo "WARNING: host uid ({{.uid}}) exists inside container (as ${existing_user_by_uid})," \
        && echo "         deleting it to create host user and group ({{.username}})..." \
        && userdel -rf "${existing_user_by_uid}"; fi

# existing_user_by_name=`getent passwd "{{.username}}" | cut -f1 -d: || true`
# existing_user_uid=`getent passwd "{{.username}}" | cut -f3 -d: || true`
# echo "existing_user_by_name:${existing_user_by_name}"
# echo "existing_user_uid:${existing_user_uid}"
# if [ -n "${existing_user_by_name}" ]; then find / -uid ${existing_user_uid} -exec chown -h {{.uid}} {} + || true ; find / -gid ${existing_user_uid} -exec chgrp -h {{.ugid}} {} + || true ; fi
# if [ -n "${existing_user_by_name}" ]; then userdel -rf "${existing_user_by_name}"; fi

existing_group_by_gid=`getent group "{{.ugid}}" | cut -f1 -d: || true`
# echo "existing_group_by_gid:${existing_group_by_gid}"
if [ -z "${existing_group_by_gid}" ]; then
    echo "group gid: host user gid ({{.ugid}}) not found inside container," \
        && echo "           will create host user group ({{.username}}) inside container..." \
        && groupadd -g "{{.ugid}}" "{{.username}}"; fi


useradd --no-log-init --no-create-home --uid "{{.uid}}" -s "/bin/bash" -c "{{.Name}}" -g "{{.ugid}}" -G "{{.gnames}}" -d "{{.homedir}}" "{{.username}}"

echo "- create homedir: {{.homedir}}"
echo "PS1=\"üê≥ \${PS1}\"" >> "/etc/skel/.bashrc"  # for user
echo "PS1=\"üê≥ \${PS1}\"" >> "/root/.bashrc"      # for after sudo -s
echo 'PATH="{{.homedir}}/.local/bin:{{.homedir}}/bin:$PATH"' >> "/etc/skel/.bashrc"

# echo "PS1=\"üê≥ \${PS1}\"" >> "/etc/bash.bashrc" # TODO doesn't work?
mkdir -pv "{{.homedir}}"
mkhomedir_helper {{.username}}
cp -nr /etc/skel/. "{{.homedir}}"
find "{{.homedir}}" -maxdepth 1 \
     -path "{{.homedir}}/.ssh" -prune \
     -o -exec chown "{{.uid}}:{{.ugid}}" {} +
chown -R "{{.uid}}:{{.ugid}}" "{{.homedir}}/.cache"

echo "- setup matrix command!"
create_bash_script() {
    file=/usr/local/bin/$1
    script=$2
    echo '#!/usr/bin/env bash' > $file
    echo "$script" >> $file
    chmod +x $file
}

create_bash_script matrix \
                   'dogi'

###############################################################
# setup sudo
set +e
distro_ubuntu=$(grep -i ubuntu /etc/os-release)
distro_fedora=$(grep -i fedora /etc/os-release)
distro_debian=$(grep -i debian /etc/os-release)
set -e
distro_unknown=""
sudo_ok=""
installing_packages_msg="installing sudo, tzdata, vim, bash-completion..."
if [ -n "${distro_ubuntu}" ] || [ -n "${distro_debian}" ]; then
    if [ "{{.setupSudo}}" == true ]; then
        if [ -n "${distro_ubuntu}" ]; then
            echo -n "- Ubuntu distro, "
        else
            echo -n "- Debian distro, "
        fi
        echo "running apt update..."
        env DEBIAN_FRONTEND=noninteractive apt-get -qq update > /dev/null
        echo "- installing apt-utils"
        env DEBIAN_FRONTEND=noninteractive apt-get -qq install apt-utils > /dev/null 2>&1
        echo "- ${installing_packages_msg}"
        env DEBIAN_FRONTEND=noninteractive apt-get -qq install sudo tzdata vim bash-completion > /dev/null
    else
        sudo_ok=false
    fi
elif [ -n "${distro_fedora}" ]; then
    echo "- Fedora distro, ${installing_packages_msg}"
    dnf install -y sudo tzdata vim bash-completion > /dev/null
else
    distro_unknown="True"
fi

if [ -n "${distro_unknown}" ]; then
    echo "- UNKNOWN distro."
    echo "failed to install packages sudo tzdata."
    sudo_ok=false
fi

if [ "${sudo_ok}" != false ]; then
    echo "{{.username}} ALL=NOPASSWD: ALL" >> /etc/sudoers.d/dogi
    sed -i '/secure_path/ s/^/#/' /etc/sudoers
    sudo_ok=true
fi
###############################################################

echo "- done, happy üê≥!"
echo "- you now are INSIDE the container"
echo "${sudo_ok}"
if [ $# -eq 0 ]; then
    if [ "${sudo_ok}" = true ]; then
        echo "- switch to user {{.username}}"
        sudo -EHu {{.username}} bash
    else
        echo "- sudo not setup for switch, will run as root"
        bash
    fi
fi

if [ "${sudo_ok}" = true ]; then
    echo "- run as user: $@"
    sudo -EHu {{.username}} "$@"
else
    echo "- sudo not setup in run, will run as root"
    $@
fi

# TODO: remove these used in tests
# echo "- run as user: $*"
# echo "- run as user: ${*@Q}"
# echo "- run as user: ${@@Q}"
# sudo -Hu {{.username}} bash -c "$@"
# exec su {{.username}} - '$*'
